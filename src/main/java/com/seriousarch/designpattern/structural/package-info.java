/**
 * 结构型模式
 * 包括：
 *  - 适配器模式（adapter）：适配器模式是一种结构型设计模式，它能使接口不兼容的对象能够相互合作
 *  - 桥接模式（bridge）：桥接模式是一种结构型设计模式，可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而能在开发时分别使用。
 *  - 组合模式（composite）：组合模式是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。
 *  - 装饰模式（decorator）：装饰模式是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。
 *  - 外观模式（facade）：外观模式是一种结构型设计模式，能为程序库、框架或其他复杂类提供一个简单的接口。
 *  - 享元模式（flyweight）：享元模式是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象。
 *  - 代理模式（proxy）：代理模式是一种结构型设计模式，让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理。
 *
 * @see {@linktourl https://refactoringguru.cn/design-patterns/structural-patterns}
 *
 * @author richard.xf
 * @date 2022-11-21 18:17
 */
package com.seriousarch.designpattern.structural;